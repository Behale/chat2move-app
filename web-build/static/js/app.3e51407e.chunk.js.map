{"version":3,"sources":["config.ts","screens/NotFoundScreen.tsx","storage.ts","api.ts","components/conversations/support.ts","logger.tsx","components/notifications/support.tsx","components/conversations/ConversationsProvider.tsx","components/chat/support.ts","webpack:///./utils.ts?8813","components/chat/ChatHeader.tsx","components/chat/ChatMessage.tsx","components/chat/ChatFooter.tsx","screens/ChatScreen.tsx","navigation/LinkingConfiguration.ts","components/conversations/ConversationItem.tsx","screens/ConversationsScreen.tsx","screens/CustomerDetailsScreen.tsx","hooks/useCustomer.ts","components/AuthProvider.tsx","screens/LoginScreen.tsx","components/SocketProvider.tsx","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.ts","assets/fonts/SpaceMono-Regular.ttf","assets/images/logo.png"],"names":["isDev","process","env","NODE_ENV","host","isLocal","hostname","match","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","get","key","result","AsyncStorage","getItem","JSON","parse","e","set","value","setItem","stringify","remove","removeItem","Storage","auth","CACHE_PREFIX","base","getAccessToken","tokens","token","getRefreshToken","renew_token","me","Error","request","then","res","body","data","login","email","password","post","send","user","logout","delete","register","companyName","inviteToken","passwordConfirmation","company_name","invite_token","password_confirmation","renew","fetchCustomer","accountId","params","customer","account_id","filters","query","qs","arrayFormat","id","expand","updateUserSettings","updates","put","customerId","conversation","customer_id","account","user_profile","user_settings","fetchConversations","fetchConversation","status","userId","assignee_id","mentioning","priority","read","updateConversation","conversationId","conversation_id","message","sent_at","Date","toISOString","recipient","subject","widgetSettingsParams","widget_settings","note","noteId","tag","tagId","tag_id","dayjs","extend","utc","mapConversationsById","conversations","reduce","acc","mapMessagesByConversationId","messages","sort","a","b","created_at","toString","String","alert","prefix","args","first","rest","length","Alert","map","arg","join","text","cancelable","logger","debug","console","log","info","warn","error","critical","hasNotificationsPermission","Notifications","Constants","isDevice","Platform","OS","name","importance","MAX","vibrationPattern","lightColor","ConversationsContext","React","createContext","loading","currentUser","pagination","previous","next","limit","total","reconnect","Promise","resolve","fetchConversationById","updateConversationById","getConversationById","getMessagesByConversationId","markConversationAsRead","sendNewMessage","useConversations","useContext","ConversationsProvider","props","channel","subscriptions","connect","joinNotificationsChannel","registerForPushNotifications","state","registerForPushNotificationsAsync","API","expo_push_token","setState","pushNotificationToken","notification","response","removePushNotificationListeners","forEach","subscription","connecting","leave","socket","on","payload","handleIncomingMessage","handleNewConversation","handleConversationUpdated","onError","setTimeout","receive","err","leaveNotificationsChannel","updateConversationState","conversationIds","conversationsById","messagesByConversationId","Set","c","getAllConversations","filter","x","last_activity_at","updated_at","y","addMessagesByConversationId","existing","push","hasEmptyBody","trim","this","disconnect","Provider","children","Component","hasSameSender","user_id","getGroupMembers","grouped","groupMembersById","Object","keys","formatLastActiveAt","date","today","yesterday","subtract","isAfter","startOf","isBefore","endOf","hours","diff","Math","floor","isBotMessage","type","getSenderIdentifier","display_name","full_name","noop","sleep","ms","getColorByUuid","uuid","parseInt","formatServerError","errors","field","description","ChatHeader","onPressCustomer","onPressBack","avatarUrl","profile_photo_url","display","lastSeenAt","last_seen_at","messageCreatedAt","local","lastActiveAt","tailwind","Icon","getColor","Image","source","uri","slice","toUpperCase","EmptyAvatar","Avatar","company_logo_url","getSenderProfilePhoto","MessageAttachment","attachment","contentType","content_type","file_url","startsWith","width","height","undefined","aspectRatio","resizeMode","ChatMessage","item","avatar","label","attachments","ChatFooter","onSendMessage","setNewMessage","TextInput","borderWidth","hairlineWidth","multiline","placeholder","onChangeText","activeOpacity","ChatScreen","route","insets","useSafeAreaInsets","isRefreshing","setRefreshing","members","Today","concat","format","groupMessagesByDate","sections","latest","handleRefreshChat","SafeAreaView","paddingTop","top","navigate","paddingBottom","bottom","SectionList","refreshing","onRefresh","contentContainerStyle","keyboardShouldPersistTaps","scrollEventThrottle","inverted","onEndReached","onEndReachedThreshold","onMomentumScrollBegin","keyExtractor","index","renderItem","section","prev","isPrevFromSameSender","isLastInGroup","isGroupChat","renderSectionFooter","prefixes","Linking","config","screens","Login","Conversations","Chat","NotFound","getInitialURL","initial","url","content","subscribe","listener","onReceiveURL","formatted","ConversationItem","onSelectConversation","lastSentAt","d","isSameDay","isWithinWeek","formatLastSentAt","split","str","TouchableHighlight","underlayColor","numberOfLines","ellipsizeMode","ConversationsScreen","handleSelectConversation","handleRefreshConversations","closeConversation","handleLoadMoreConversations","after","displayed","Dimensions","disableRightSwipe","rightOpenValue","renderHiddenItem","useFlatList","ListFooterComponent","ActivityIndicator","CustomerDetailsScreen","options","setCustomer","setError","isFetching","setIsFetching","catch","finally","useCustomer","size","errorMessage","datetime","browser","company","os","pathname","phone","externalId","external_id","firstSeenAt","first_seen","lastIpAddress","ip","timezone","time_zone","metadata","hasMetadata","formattedTimezone","goBack","ScrollView","properties","Boolean","slack_channel_name","entries","CustomerDetailsSection","AuthContext","isAuthenticated","refresh","useAuth","AuthProvider","timeout","handleAuthSuccess","nextRefreshToken","handleClearAuth","refreshToken","clearTimeout","LoginScreen","pending","setPending","setEmail","setPassword","setErrorMessage","handleLogIn","require","autoCapitalize","autoCompleteType","secureTextEntry","disabled","SOCKET_URL","SocketContext","Socket","hasConnectionError","SocketProvider","createNewSocket","onOpen","onClose","throttle","history","cb","Navigation","colorScheme","KeyboardAvoidingView","behavior","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","createStackNavigator","Consumer","Navigator","screenOptions","headerShown","Screen","component","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","loadResourcesAndDataAsync","useCachedResources","_useColorScheme","StatusBar","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","module","exports"],"mappings":"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","file":"static/js/app.3e51407e.chunk.js","sourcesContent":["export const isDev = process?.env?.NODE_ENV === 'development';\n\nexport const host = 'chat2move.herokuapp.com';\n\nexport const isLocal = (hostname: string) => {\n  return (\n    hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n};\n","import {StackScreenProps} from '@react-navigation/stack';\nimport * as React from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\n\nimport {RootStackParamList} from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity\n        onPress={() => navigation.replace('Root')}\n        style={styles.link}\n      >\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const CACHE_PREFIX = '@papercups';\nexport const AUTH_CACHE_KEY = `${CACHE_PREFIX}:auth`;\n\nexport const get = async (key: string) => {\n  const result = await AsyncStorage.getItem(`${CACHE_PREFIX}${key}`);\n\n  if (!result) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(result);\n  } catch (e) {\n    return result;\n  }\n};\n\nexport const set = async (key: string, value: any) => {\n  return AsyncStorage.setItem(`${CACHE_PREFIX}${key}`, JSON.stringify(value));\n};\n\nexport const remove = async (key: string) => {\n  return AsyncStorage.removeItem(`${CACHE_PREFIX}${key}`);\n};\n\nexport const Storage = {\n  get,\n  set,\n  remove,\n\n  auth: {\n    get: async () => get(AUTH_CACHE_KEY),\n    set: async (value: any) => set(AUTH_CACHE_KEY, value),\n    remove: async () => remove(AUTH_CACHE_KEY),\n  },\n};\n\nexport default Storage;\n","import request from 'superagent';\nimport qs from 'query-string';\n\nimport Storage, {AUTH_CACHE_KEY} from './storage';\nimport {\n  Account,\n  Conversation,\n  ConversationPagination,\n  Customer,\n  CustomerNote,\n  Tag,\n  User,\n  WidgetSettings,\n} from './types';\nimport {host, isLocal} from './config';\n\nconst isHttp = isLocal(host);\nconst base = `${isHttp ? 'http://' : 'https://'}${host}`;\n// const base = 'http://localhost:4000';\n\nexport type LoginParams = {\n  email: string;\n  password: string;\n};\n\nexport type RegisterParams = LoginParams & {\n  companyName?: string;\n  inviteToken?: string;\n  passwordConfirmation: string;\n};\n\nexport type ResetPasswordParams = {\n  password: string;\n  passwordConfirmation: string;\n};\n\nexport const getAccessToken = async (): Promise<string | null> => {\n  const tokens = await Storage.get(AUTH_CACHE_KEY);\n\n  return (tokens && tokens.token) || null;\n};\n\nexport const getRefreshToken = async (): Promise<string | null> => {\n  const tokens = await Storage.get(AUTH_CACHE_KEY);\n\n  return (tokens && tokens.renew_token) || null;\n};\n\nexport const me = async (key?: string): Promise<User> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const login = async ({email, password}: LoginParams) => {\n  return request\n    .post(`${base}/api/session`)\n    .send({user: {email, password}})\n    .then((res) => res.body.data);\n};\n\nexport const logout = async () => {\n  return request.delete(`${base}/api/session`).then((res) => res.body);\n};\n\nexport const register = async ({\n  companyName,\n  inviteToken,\n  email,\n  password,\n  passwordConfirmation,\n}: RegisterParams) => {\n  return request\n    .post(`${base}/api/registration`)\n    .send({\n      user: {\n        company_name: companyName,\n        invite_token: inviteToken,\n        email,\n        password,\n        password_confirmation: passwordConfirmation,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const renew = async (key?: string) => {\n  const token = key || (await getRefreshToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/session/renew`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createNewCustomer = async (\n  accountId: string,\n  params: Partial<Customer>\n) => {\n  return request\n    .post(`${base}/api/customers`)\n    .send({\n      customer: {\n        ...params,\n        account_id: accountId,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomers = async (filters = {}, key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/customers`)\n    .query(qs.stringify(filters, {arrayFormat: 'bracket'}))\n    .set('Authorization', token)\n    .then((res) => res.body);\n};\n\nexport const fetchCustomer = async (\n  id: string,\n  query: {expand?: Array<string>} = {},\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  const {expand = []} = query;\n\n  return request\n    .get(`${base}/api/customers/${id}`)\n    .query(qs.stringify({expand}, {arrayFormat: 'bracket'}))\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateCustomer = async (\n  id: string,\n  updates: Record<string, any>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/customers/${id}`)\n    .set('Authorization', token)\n    .send({\n      customer: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewConversation = async (\n  customerId: string,\n  params?: Record<any, any>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/conversations`)\n    .set('Authorization', token)\n    .send({\n      conversation: {\n        customer_id: customerId,\n        ...params,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAccountInfo = async (key?: string): Promise<Account> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/accounts/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateAccountInfo = async (\n  updates: Record<string, any>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/accounts/me`)\n    .set('Authorization', token)\n    .send({\n      account: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfile = async (key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/profile`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserProfile = async (\n  updates: Record<string, any>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/profile`)\n    .set('Authorization', token)\n    .send({\n      user_profile: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserSettings = async (key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/user_settings`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserSettings = async (\n  updates: Record<string, any>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/user_settings`)\n    .set('Authorization', token)\n    .send({\n      user_settings: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport type PaginationOptions = {\n  limit?: number;\n  next?: string | null;\n  previous?: string | null;\n  total?: number;\n};\n\nexport type ConversationsListResponse = {\n  data: Array<Conversation>;\n} & ConversationPagination;\n\nexport const countUnreadConversations = async (key?: string): Promise<any> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/conversations/unread`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchConversations = async (\n  query = {},\n  key?: string\n): Promise<ConversationsListResponse> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/conversations`)\n    .query(query)\n    .set('Authorization', token)\n    .then((res) => res.body);\n};\n\nexport const fetchAllConversations = async (query = {}, key?: string) => {\n  return fetchConversations({...query, status: 'open'}, key);\n};\n\nexport const fetchMyConversations = async (\n  userId?: number,\n  query = {},\n  key?: string\n) => {\n  return fetchConversations(\n    {\n      ...query,\n      assignee_id: userId || 'me',\n      status: 'open',\n    },\n    key\n  );\n};\n\nexport const fetchMentionedConversations = async (\n  userId?: number,\n  query = {},\n  key?: string\n) => {\n  return fetchConversations(\n    {\n      ...query,\n      mentioning: userId || 'me',\n      status: 'open',\n    },\n    key\n  );\n};\n\nexport const fetchPriorityConversations = async (query = {}, key?: string) => {\n  return fetchConversations(\n    {\n      ...query,\n      priority: 'priority',\n      status: 'open',\n    },\n    key\n  );\n};\n\nexport const fetchClosedConversations = async (query = {}, key?: string) => {\n  return fetchConversations({...query, status: 'closed'}, key);\n};\n\nexport const fetchUnreadConversations = async (query = {}, key?: string) => {\n  return fetchConversations({...query, status: 'open', read: false}, key);\n};\n\nexport const fetchUnassignedConversations = async (\n  query = {},\n  key?: string\n) => {\n  return fetchConversations(\n    {\n      ...query,\n      status: 'open',\n      assignee_id: null,\n    },\n    key\n  );\n};\n\nexport const fetchConversation = async (\n  id: string,\n  key?: string\n): Promise<Conversation> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/conversations/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchPreviousConversation = async (\n  id: string,\n  key?: string\n): Promise<Conversation> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/conversations/${id}/previous`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchRelatedConversations = async (\n  id: string,\n  key?: string\n): Promise<Array<Conversation>> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/conversations/${id}/related`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSlackConversationThreads = async (\n  conversationId: string,\n  key?: string\n): Promise<Array<Conversation>> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/slack_conversation_threads`)\n    .query({conversation_id: conversationId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const generateShareConversationToken = async (\n  conversationId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/conversations/${conversationId}/share`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSharedConversation = async (\n  id: string,\n  key?: string\n): Promise<Conversation> => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Access denied!');\n  }\n\n  return request\n    .get(`${base}/api/conversations/shared`)\n    .query({token, conversation_id: id})\n    .then((res) => res.body.data);\n};\n\nexport const updateConversation = async (\n  conversationId: string,\n  updates: Record<string, any>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .send(updates)\n    .then((res) => res.body.data);\n};\n\nexport const deleteConversation = async (\n  conversationId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`${base}/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .then((res) => res.body);\n};\n\nexport const archiveConversation = async (\n  conversationId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/conversations/${conversationId}/archive`)\n    .set('Authorization', token)\n    .then((res) => res.body);\n};\n\nexport const createNewMessage = async (\n  conversationId: string,\n  message: any,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/messages`)\n    .set('Authorization', token)\n    .send({\n      message: {\n        conversation_id: conversationId,\n        sent_at: new Date().toISOString(),\n        ...message,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const countMessages = async (key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/messages/count`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerConversations = async (\n  customerId: string,\n  accountId: string\n) => {\n  return request\n    .get(`${base}/api/conversations/customer`)\n    .query({customer_id: customerId, account_id: accountId})\n    .then((res) => res.body.data);\n};\n\nexport const sendSlackNotification = async (\n  params: {\n    text: string;\n    type?: 'reply' | 'support';\n    channel?: string;\n  },\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/slack/notify`)\n    .send(params)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const sendTwilioSms = async (\n  params: {to: string; body: string},\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/twilio/send`)\n    .send(params)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchGithubRepos = async (key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/github/repos`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const findGithubIssues = async (\n  query: {\n    url?: string;\n    owner?: string;\n    repo?: string;\n  },\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/github/issues`)\n    .query(query)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport type EmailParams = {\n  recipient: string;\n  subject: string;\n  message: string;\n};\n\nexport const sendGmailNotification = async (\n  {recipient, subject, message}: EmailParams,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/gmail/send`)\n    .send({recipient, subject, message})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateWidgetSettings = async (\n  widgetSettingsParams: Partial<WidgetSettings>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/widget_settings`)\n    .send({widget_settings: widgetSettingsParams})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchAccountUsers = async (key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/users`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchAccountUser = async (id: number, key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/users/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport type CustomerNotesListResponse = {\n  data: Array<CustomerNote>;\n};\n\nexport const createCustomerNote = async (\n  customerId: string,\n  body: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/notes`)\n    .set('Authorization', token)\n    .send({\n      note: {\n        body,\n        customer_id: customerId,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteCustomerNote = async (noteId: string, key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`${base}/api/notes/${noteId}`)\n    .set('Authorization', token);\n};\n\nexport const fetchAllTags = async (key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/tags`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchTagById = async (id: string, key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`${base}/api/tags/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createTag = async (tag: Partial<Tag>, key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/tags`)\n    .send({tag})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateTag = async (\n  id: string,\n  tag: Partial<Tag>,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`${base}/api/tags/${id}`)\n    .send({tag})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const deleteTag = async (id: string, key?: string) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`${base}/api/tags/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body);\n};\n\nexport const addConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/conversations/${conversationId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`${base}/api/conversations/${conversationId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`${base}/api/customers/${customerId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  key?: string\n) => {\n  const token = key || (await getAccessToken());\n\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`${base}/api/customers/${customerId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n","import dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport {Conversation, Message} from '../../types';\n\ndayjs.extend(utc);\n\nexport const formatLastSentAt = (date: string) => {\n  const d = dayjs.utc(date).local();\n  const isSameDay = dayjs.utc(date).isAfter(dayjs().startOf('day'));\n  const isWithinWeek = dayjs().diff(dayjs.utc(date), 'days') < 6;\n\n  if (isSameDay) {\n    return d.format('h:mm a');\n  } else if (isWithinWeek) {\n    return d.format('ddd');\n  } else {\n    return d.format('MMM D');\n  }\n};\n\nexport const mapConversationsById = (conversations: Array<Conversation>) => {\n  return conversations.reduce((acc, conversation) => {\n    const {id} = conversation;\n\n    return {...acc, [id]: conversation};\n  }, {} as {[id: string]: Conversation});\n};\n\nexport const mapMessagesByConversationId = (\n  conversations: Array<Conversation>\n) => {\n  return conversations.reduce((acc, {id, messages = []}) => {\n    return {\n      ...acc,\n      // TODO: move sorting logic to server?\n      [id]: messages.sort(\n        (a, b) => +new Date(b.created_at) - +new Date(a.created_at)\n      ),\n    };\n  }, {} as {[id: string]: Array<Message>});\n};\n","import {Alert} from 'react-native';\n\nconst stringify = (data: any) => {\n  try {\n    if (data instanceof Error) {\n      return data.toString();\n    } else if (typeof data === 'object') {\n      return JSON.stringify(data, null, 2);\n    } else if (typeof data === 'string') {\n      return data;\n    }\n\n    return String(data);\n  } catch (e) {\n    return String(data);\n  }\n};\n\nconst alert = (prefix: string, args: Array<any>) => {\n  const [first, ...rest] = args;\n\n  if (typeof first === 'string' && rest.length > 0) {\n    const title = `[${prefix}] ${first}`;\n\n    Alert.alert(\n      title,\n      rest.map((arg: any) => stringify(arg)).join('\\n'),\n      [{text: 'Dismiss'}],\n      {cancelable: true}\n    );\n  } else {\n    Alert.alert(\n      prefix,\n      args.map((arg: any) => stringify(arg)).join('\\n'),\n      [{text: 'Dismiss'}],\n      {cancelable: true}\n    );\n  }\n};\n\nconst logger = {\n  debug(...args: any) {\n    console.debug(...args);\n  },\n\n  log(...args: any) {\n    console.log(...args);\n  },\n\n  info(...args: any) {\n    console.info(...args);\n  },\n\n  warn(...args: any) {\n    console.warn(...args);\n  },\n\n  error(...args: any) {\n    // TODO: capture these errors in Sentry?\n    console.error(...args);\n  },\n\n  critical(...args: any) {\n    // TODO: capture these errors in Sentry?\n    console.error(...args);\n    // TODO: remove after testing\n    alert('Error', args);\n  },\n};\n\nexport default logger;\n","import Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport React from 'react';\nimport {Text, View, Button, Platform} from 'react-native';\nimport logger from '../../logger';\n\nexport const init = () => {\n  Notifications.setNotificationHandler({\n    handleNotification: async () => ({\n      shouldShowAlert: true,\n      shouldPlaySound: false,\n      shouldSetBadge: false,\n    }),\n  });\n};\n\nexport const Debugger = ({\n  token,\n  notification,\n}: {\n  token: string;\n  notification: any;\n}) => {\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}\n    >\n      <Text>Your expo push token: {token}</Text>\n      <View style={{alignItems: 'center', justifyContent: 'center'}}>\n        <Text>\n          Title: {notification && notification.request.content.title}{' '}\n        </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>\n          Data:{' '}\n          {notification && JSON.stringify(notification.request.content.data)}\n        </Text>\n      </View>\n      <Button\n        title=\"Press to Send Notification\"\n        onPress={async () => {\n          await sendPushNotification(token);\n        }}\n      />\n    </View>\n  );\n};\n\ntype ExpoNotificationMessage = {\n  to?: string;\n  sound?: string;\n  title?: string;\n  body?: string;\n  data?: Record<string, any>;\n};\n\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.dev/notifications\nexport async function sendPushNotification(\n  token: string,\n  message: ExpoNotificationMessage = {}\n) {\n  // TODO: replace with actual implementation (this is just for demo)\n  const payload = {\n    to: token,\n    sound: message.sound || 'default',\n    title: message.title || 'Demo title',\n    body: message.body || 'Hello world!',\n    data: message.data || {extra: 'goes here'},\n  };\n  console.log('Sending push notification:', payload);\n  return fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n    .then((res) => res.json())\n    .then((result) => console.log('Push notification result:', result))\n    .catch((error) => logger.error('Push notification error:', error));\n}\n\nexport async function hasNotificationsPermission() {\n  const {status: existingStatus} = await Notifications.getPermissionsAsync();\n\n  if (existingStatus === 'granted') {\n    return true;\n  }\n\n  const {status: requestedStatus} =\n    await Notifications.requestPermissionsAsync();\n\n  return requestedStatus === 'granted';\n}\n\nexport async function registerForPushNotificationsAsync(): Promise<\n  string | null\n> {\n  let token = null;\n\n  if (Constants.isDevice) {\n    const hasPermission = await hasNotificationsPermission();\n\n    if (!hasPermission) {\n      logger.warn('Failed to get push token for push notification!');\n\n      return null;\n    }\n\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n  } else {\n    logger.warn('Must use physical device for push notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n","import React, {useContext} from 'react';\nimport {Channel, Socket} from 'phoenix';\nimport * as Notifications from 'expo-notifications';\n\nimport * as API from '../../api';\nimport {Conversation, ConversationPagination, Message, User} from '../../types';\nimport {mapConversationsById, mapMessagesByConversationId} from './support';\nimport {registerForPushNotificationsAsync} from '../notifications/support';\nimport logger from '../../logger';\n\nexport const ConversationsContext = React.createContext<{\n  loading?: boolean;\n  conversations: Array<Conversation>;\n  currentUser: User | null;\n  pagination: ConversationPagination;\n  reconnect: () => Promise<void>;\n  fetchConversations: (\n    query?: Record<string, any>\n  ) => Promise<API.ConversationsListResponse>;\n  fetchConversationById: (id: string) => Promise<Conversation | null>;\n  updateConversationById: (\n    id: string,\n    updates: Record<any, any>\n  ) => Promise<Conversation | null>;\n  getConversationById: (id: string) => Conversation | null;\n  getMessagesByConversationId: (id: string) => Array<Message>;\n  markConversationAsRead: (id: string) => void;\n  sendNewMessage: (message: Partial<Message>) => void;\n}>({\n  loading: false,\n  conversations: [],\n  currentUser: null,\n  pagination: {\n    previous: null,\n    next: null,\n    limit: null,\n    total: null,\n  },\n  reconnect: () => Promise.resolve(),\n  fetchConversations: () =>\n    Promise.resolve({\n      data: [],\n      next: null,\n      previous: null,\n      limit: null,\n      total: null,\n    }),\n  fetchConversationById: () => Promise.resolve(null),\n  updateConversationById: () => Promise.resolve(null),\n  getConversationById: () => null,\n  getMessagesByConversationId: () => [],\n  markConversationAsRead: () => null,\n  sendNewMessage: () => null,\n});\n\nexport const useConversations = () => useContext(ConversationsContext);\n\ntype Props = {socket: Socket} & React.PropsWithChildren<{}>;\ntype State = {\n  loading: boolean;\n  connecting: boolean;\n  currentUser: User | null;\n  pushNotificationToken: string | null;\n  conversationIds: Array<string>;\n  conversationsById: {[id: string]: Conversation};\n  messagesByConversationId: {[id: string]: Array<Message>};\n  pagination: ConversationPagination;\n};\n\nexport class ConversationsProvider extends React.Component<Props, State> {\n  channel: Channel | null = null;\n  subscriptions: Array<any> = [];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      connecting: false,\n      currentUser: null,\n      pushNotificationToken: null,\n      conversationIds: [],\n      conversationsById: {},\n      messagesByConversationId: {},\n      pagination: {\n        previous: null,\n        next: null,\n        limit: null,\n        total: null,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchConversations({status: 'open'});\n\n    const me = await API.me();\n    const {account_id: accountId} = me;\n\n    this.setState(\n      {\n        currentUser: me,\n        loading: false,\n      },\n      () => this.connect(accountId)\n    );\n  }\n\n  componentWillUnmount() {\n    this.disconnect();\n  }\n\n  connect = async (accountId: string) => {\n    this.joinNotificationsChannel(accountId);\n\n    await this.registerForPushNotifications();\n  };\n\n  reconnect = async () => {\n    const {currentUser} = this.state;\n    const accountId = currentUser?.account_id;\n\n    if (accountId) {\n      await this.connect(accountId);\n      await this.fetchConversations({status: 'open'});\n    } else {\n      logger.critical(\n        'Cannot reconnect until current user is available:',\n        this.state\n      );\n    }\n  };\n\n  disconnect() {\n    this.leaveNotificationsChannel();\n    this.removePushNotificationListeners();\n  }\n\n  registerForPushNotifications = async () => {\n    console.debug('Registering push notifications...');\n    const token = await registerForPushNotificationsAsync();\n    console.debug('Expo push token:', token);\n\n    if (token) {\n      await API.updateUserSettings({expo_push_token: token});\n\n      this.setState({pushNotificationToken: token});\n      console.log('Successfully registered push notifications!', token);\n      this.subscriptions = [\n        ...this.subscriptions,\n        // This listener is fired whenever a notification is received while the app is foregrounded\n        Notifications.addNotificationReceivedListener((notification) => {\n          console.log('addNotificationReceivedListener', notification);\n        }),\n        // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n        Notifications.addNotificationResponseReceivedListener((response) => {\n          console.log('addNotificationResponseReceivedListener', response);\n        }),\n      ];\n    }\n  };\n\n  removePushNotificationListeners = () => {\n    console.log('removePushNotificationListeners');\n    this.subscriptions.forEach((subscription) => {\n      Notifications.removeNotificationSubscription(subscription);\n    });\n  };\n\n  joinNotificationsChannel = (accountId: string) => {\n    if (this.state.connecting) {\n      console.debug('Alreading connecting to channel... Skipping for now.');\n\n      return;\n    }\n\n    this.setState({connecting: true});\n\n    if (this.channel && this.channel.leave) {\n      console.debug(\n        'Channel already exists. Leaving channel before connecting...'\n      );\n      this.channel.leave(); // TODO: what's the best practice here?\n    }\n\n    this.channel = this.props.socket.channel(`notification:${accountId}`, {});\n\n    this.channel.on('shout', (payload) => this.handleIncomingMessage(payload));\n    // TODO: fix race condition between this event and `shout` above\n    this.channel.on('conversation:created', ({id}) =>\n      this.handleNewConversation(id)\n    );\n\n    this.channel.on('conversation:updated', ({id, updates}) =>\n      this.handleConversationUpdated(id, updates)\n    );\n\n    this.channel.onError(() => {\n      logger.error(\n        'Error connecting to notification channel. Attempting reconnect after 1s...'\n      );\n\n      setTimeout(() => this.reconnect(), 1000);\n    });\n\n    this.channel\n      .join()\n      .receive('ok', (data) => {\n        console.debug('Joined channel successfully:', data);\n\n        this.setState({connecting: false});\n      })\n      .receive('error', (err) => {\n        this.setState({connecting: false});\n\n        logger.critical('Unable to join channel:', err);\n        logger.error('Attempting reconnect after 1s...');\n        // TODO: double check that this works (retries after 1s)\n        setTimeout(() => this.reconnect(), 1000);\n      })\n      .receive('timeout', (data) => {\n        this.setState({connecting: false});\n\n        logger.critical('Connection to channel timed out:', data);\n        logger.error('Attempting reconnect after 1s...');\n        // TODO: double check that this works (retries after 1s)\n        setTimeout(() => this.reconnect(), 1000);\n      });\n  };\n\n  leaveNotificationsChannel = () => {\n    if (this.channel && this.channel.leave) {\n      this.channel.leave();\n    }\n  };\n\n  updateConversationState = (conversation: Conversation) => {\n    const {id, messages = []} = conversation;\n\n    const {\n      conversationIds = [],\n      conversationsById = {},\n      messagesByConversationId = {},\n    } = this.state;\n\n    this.setState({\n      conversationIds: [...new Set([...conversationIds, id])],\n      conversationsById: {\n        ...conversationsById,\n        [id]: conversation,\n      },\n      messagesByConversationId: {\n        ...messagesByConversationId,\n        [id]: messages,\n      },\n    });\n  };\n\n  fetchConversations = async (\n    query: Record<string, any> = {status: 'open'}\n  ) => {\n    try {\n      const result = await API.fetchConversations(query);\n      const {data: conversations = [], ...pagination} = result;\n      const {\n        conversationIds = [],\n        conversationsById = {},\n        messagesByConversationId = {},\n      } = this.state;\n\n      this.setState({\n        pagination,\n        conversationIds: [\n          ...new Set([...conversationIds, ...conversations.map((c) => c.id)]),\n        ],\n        conversationsById: {\n          ...conversationsById,\n          ...mapConversationsById(conversations),\n        },\n        messagesByConversationId: {\n          ...messagesByConversationId,\n          ...mapMessagesByConversationId(conversations),\n        },\n      });\n\n      return result;\n    } catch (err) {\n      logger.critical('Failed to fetch conversations:', err);\n\n      throw err;\n    }\n  };\n\n  fetchConversationById = async (conversationId: string) => {\n    try {\n      const conversation = await API.fetchConversation(conversationId);\n      this.updateConversationState(conversation);\n\n      return conversation;\n    } catch (err) {\n      logger.critical('Failed to fetch conversation:', conversationId, err);\n\n      throw err;\n    }\n  };\n\n  updateConversationById = async (\n    conversationId: string,\n    updates: Record<any, any>\n  ) => {\n    try {\n      const conversation = await API.updateConversation(\n        conversationId,\n        updates\n      );\n      this.updateConversationState(conversation);\n\n      return conversation;\n    } catch (err) {\n      logger.critical(\n        'Failed to update conversation:',\n        conversationId,\n        updates,\n        err\n      );\n\n      throw err;\n    }\n  };\n\n  getConversationById = (conversationId: string): Conversation | null => {\n    const conversation = this.state.conversationsById[conversationId];\n\n    if (!conversation) {\n      // TODO: figure out the best way to avoid this... probably needs to be\n      // handled on the server where we handle emitting events via channels)\n      logger.warn(`Missing conversation in cache for id: ${conversationId}`);\n\n      return null;\n    }\n\n    return conversation;\n  };\n\n  getAllConversations = (): Array<Conversation> => {\n    return this.state.conversationIds\n      .map((id) => this.getConversationById(id))\n      .filter(\n        (conversation: Conversation | null): conversation is Conversation =>\n          !!conversation\n      )\n      .filter(({messages = []}) => messages && messages.length > 0)\n      .sort((a: Conversation, b: Conversation) => {\n        const x = a.last_activity_at || a.updated_at;\n        const y = b.last_activity_at || b.updated_at;\n\n        return +new Date(y) - +new Date(x);\n      });\n  };\n\n  getMessagesByConversationId = (conversationId: string) => {\n    const messages = this.state.messagesByConversationId[conversationId];\n\n    if (!messages) {\n      // TODO: figure out the best way to avoid this... probably needs to be\n      // handled on the server where we handle emitting events via channels)\n      logger.warn(\n        `Missing messages in cache for conversation: ${conversationId}`\n      );\n\n      return [];\n    }\n\n    return messages;\n  };\n\n  addMessagesByConversationId = (\n    conversationId: string,\n    messages: Array<Message>\n  ) => {\n    return {\n      ...this.state.messagesByConversationId,\n      [conversationId]: [\n        ...this.getMessagesByConversationId(conversationId),\n        ...messages,\n      ],\n    };\n  };\n\n  handleIncomingMessage = (message: Message) => {\n    const {conversation_id: conversationId} = message;\n\n    this.setState({\n      messagesByConversationId: {\n        ...this.state.messagesByConversationId,\n        [conversationId]: [\n          message,\n          ...this.getMessagesByConversationId(conversationId),\n        ],\n      },\n    });\n  };\n\n  handleNewConversation = async (conversationId: string) => {\n    await this.fetchConversations({status: 'open'});\n  };\n\n  handleConversationUpdated = async (\n    conversationId: string,\n    updates: Record<any, any>\n  ) => {\n    const existing = this.getConversationById(conversationId);\n\n    if (!existing) {\n      return this.fetchConversations({status: 'open'});\n    }\n\n    this.setState({\n      conversationsById: {\n        ...this.state.conversationsById,\n        [conversationId]: {\n          ...existing,\n          ...updates,\n        },\n      },\n    });\n\n    return this.fetchConversations({status: 'open'});\n  };\n\n  markConversationAsRead = (conversationId?: string) => {\n    if (!conversationId) {\n      return;\n    }\n\n    this.channel\n      ?.push('read', {\n        conversation_id: conversationId,\n      })\n      .receive('ok', (response) => {\n        console.debug('Marked as read!', {response, conversationId});\n\n        this.handleConversationUpdated(conversationId, {read: true});\n      });\n  };\n\n  sendNewMessage = (message: Partial<Message>) => {\n    if (!message || !message.conversation_id) {\n      throw new Error(\n        `Invalid message ${message} - a \\`conversation_id\\` is required.`\n      );\n    }\n\n    const {body} = message;\n    const hasEmptyBody = !body || body.trim().length === 0;\n\n    if (!this.channel || hasEmptyBody) {\n      return;\n    }\n\n    console.log('Attempting to send message to channel', message);\n\n    this.channel.push('shout', {\n      ...message,\n      // TODO: figure out what to do here\n      sent_at: new Date().toISOString(),\n    });\n  };\n\n  render() {\n    const {loading, currentUser, pagination} = this.state;\n    const conversations = this.getAllConversations();\n\n    return (\n      <ConversationsContext.Provider\n        value={{\n          loading,\n          currentUser,\n          conversations,\n          pagination,\n          reconnect: this.reconnect,\n          fetchConversations: this.fetchConversations,\n          fetchConversationById: this.fetchConversationById,\n          updateConversationById: this.updateConversationById,\n          markConversationAsRead: this.markConversationAsRead,\n          getConversationById: this.getConversationById,\n          getMessagesByConversationId: this.getMessagesByConversationId,\n          sendNewMessage: this.sendNewMessage,\n        }}\n      >\n        {this.props.children}\n      </ConversationsContext.Provider>\n    );\n  }\n}\n","import dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport {Account, Customer, Message, User} from '../../types';\n\ndayjs.extend(utc);\n\nexport const hasSameSender = (a: Message, b: Message) => {\n  if (a.user_id && b.user_id) {\n    return a.user_id === b.user_id;\n  } else if (a.customer_id && b.customer_id) {\n    return a.customer_id === b.customer_id;\n  } else {\n    return false;\n  }\n};\n\nexport const groupMembersById = (messages: Array<Message>) => {\n  return messages.reduce((acc, message) => {\n    const {user, customer} = message;\n\n    if (user && user.id) {\n      return {...acc, [`user:${user.id}`]: user};\n    } else if (customer && customer.id) {\n      return {...acc, [`customer:${customer.id}`]: customer};\n    } else {\n      return acc;\n    }\n  }, {} as {[id: string]: User | Customer});\n};\n\nexport const getGroupMembers = (messages: Array<Message>) => {\n  const grouped = groupMembersById(messages);\n\n  return Object.keys(grouped).map((id) => {\n    return grouped[id];\n  });\n};\n\nexport const groupMessagesByDate = (messages: Array<Message>) => {\n  return messages.reduce((acc, message) => {\n    const {created_at: date} = message;\n    const isToday = dayjs.utc(date).isAfter(dayjs().startOf('day'));\n\n    if (isToday) {\n      return {...acc, Today: (acc['Today'] || []).concat(message)};\n    } else {\n      const key = dayjs.utc(date).local().format('MMM D');\n\n      return {...acc, [key]: (acc[key] || []).concat(message)};\n    }\n  }, {} as {[date: string]: Array<Message>});\n};\n\nexport const formatLastActiveAt = (date: dayjs.Dayjs) => {\n  const today = dayjs();\n  const yesterday = today.subtract(1, 'day');\n\n  if (date.isAfter(today.startOf('day'))) {\n    return 'Last seen today';\n  } else if (\n    date.isAfter(yesterday.startOf('day')) &&\n    date.isBefore(yesterday.endOf('day'))\n  ) {\n    return 'Last seen yesterday';\n  } else {\n    const hours = today.diff(date, 'hours');\n    const days = Math.floor(hours / 24);\n\n    return `Last seen ${days}d ago`;\n  }\n};\n\nexport const isBotMessage = (message: Message) => {\n  return message.type === 'bot';\n};\n\nexport const isAgentMessage = (message: Message) => {\n  return !isBotMessage(message) && !!message.user_id;\n};\n\nexport const getSenderIdentifier = (\n  message: Message,\n  account?: Account | null\n) => {\n  const {user, customer} = message;\n\n  if (isBotMessage(message)) {\n    return account?.company_name || 'Bot';\n  }\n\n  if (user) {\n    const {display_name, full_name, email} = user;\n\n    return display_name || full_name || email || 'Agent';\n  } else if (customer) {\n    const {name, email} = customer;\n\n    return name || email || 'Anonymous User';\n  } else {\n    return 'Anonymous User';\n  }\n};\n\nexport const getSenderProfilePhoto = (\n  message: Message,\n  account?: Account | null\n) => {\n  const {user, customer} = message;\n\n  if (isBotMessage(message)) {\n    return account?.company_logo_url || null;\n  }\n\n  if (user) {\n    return user.profile_photo_url || null;\n  } else if (customer) {\n    return customer.profile_photo_url || null;\n  } else {\n    return null;\n  }\n};\n","export const noop = () => {};\n\nexport const sleep = (ms: number) => new Promise((res) => setTimeout(res, ms));\n\nexport const getColorByUuid = (uuid?: string | null) => {\n  if (!uuid) {\n    return 'blue';\n  }\n\n  const colorIndex = parseInt(uuid, 32) % 5;\n  const color = ['red', 'yellow', 'green', 'purple', 'indigo'][colorIndex];\n\n  return color;\n};\n\nexport const formatServerError = (err: any) => {\n  try {\n    const error = err?.response?.body?.error ?? {};\n    const {errors = {}, message, status} = error;\n\n    if (status === 422 && Object.keys(errors).length > 0) {\n      const messages = Object.keys(errors)\n        .map((field) => {\n          const description = errors[field];\n\n          if (description) {\n            return `${field} ${description}`;\n          } else {\n            return `invalid ${field}`;\n          }\n        })\n        .join(', ');\n\n      return `Error: ${messages}.`;\n    } else {\n      return (\n        message ||\n        err?.message ||\n        'Something went wrong. Please contact us or try again in a few minutes.'\n      );\n    }\n  } catch {\n    return (\n      err?.response?.body?.error?.message ||\n      err?.message ||\n      'Something went wrong. Please contact us or try again in a few minutes.'\n    );\n  }\n};\n","import * as React from 'react';\nimport {View, Text, TouchableOpacity, Image} from 'react-native';\nimport tailwind, {getColor} from 'tailwind-rn';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport {Conversation} from '../../types';\nimport {getColorByUuid} from '../../utils';\nimport {Icon} from 'react-native-elements/dist/icons/Icon';\nimport {formatLastActiveAt} from '../chat/support';\n\ndayjs.extend(utc);\n\nexport const ChatHeader = ({\n  conversation,\n  onPressCustomer,\n  onPressBack,\n}: {\n  conversation: Conversation;\n  onPressCustomer: () => void;\n  onPressBack: () => void;\n}) => {\n  const {customer, messages = []} = conversation;\n  const {name, email, id: customerId, profile_photo_url: avatarUrl} = customer;\n  const [message] = messages;\n  const display = name || email || 'Anonymous User';\n  const color = getColorByUuid(customerId);\n  const lastSeenAt = dayjs(customer.last_seen_at);\n  const messageCreatedAt = dayjs.utc(message.created_at).local();\n  const lastActiveAt = messageCreatedAt.isAfter(lastSeenAt)\n    ? formatLastActiveAt(messageCreatedAt)\n    : formatLastActiveAt(lastSeenAt);\n\n  return (\n    <View style={tailwind('p-4 flex-row')}>\n      <View style={tailwind('flex-row items-center')}>\n        <TouchableOpacity style={tailwind('pr-2')} onPress={onPressBack}>\n          <Icon\n            name=\"chevron-left\"\n            type=\"feather\"\n            color={getColor('blue-500')}\n            onPress={onPressBack}\n          />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          onPress={onPressCustomer}\n          style={tailwind('flex-row')}\n        >\n          {avatarUrl ? (\n            <Image\n              style={{\n                ...tailwind(\n                  'mr-3 w-10 h-10 rounded-full items-center justify-center'\n                ),\n              }}\n              source={{\n                uri: avatarUrl,\n              }}\n            />\n          ) : (\n            <View\n              style={{\n                ...tailwind(\n                  `mr-3 w-10 h-10 bg-${color}-500 rounded-full items-center justify-center`\n                ),\n              }}\n            >\n              <Text style={tailwind('text-white text-base')}>\n                {display.slice(0, 1).toUpperCase()}\n              </Text>\n            </View>\n          )}\n\n          <View>\n            <Text style={tailwind('text-base font-medium')}>{display}</Text>\n            <Text style={tailwind('text-gray-500')}>{lastActiveAt}</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default ChatHeader;\n","import * as React from 'react';\nimport {View, Text, Image, Dimensions} from 'react-native';\nimport tailwind from 'tailwind-rn';\n\nimport {Attachment, Message, User} from '../../types';\nimport {getColorByUuid} from '../../utils';\nimport {getSenderIdentifier, getSenderProfilePhoto} from './support';\n\nexport const EmptyAvatar = ({style = {}}: {style?: any}) => {\n  return (\n    <View\n      style={{\n        ...tailwind(`mr-3 w-8 h-8 rounded-full items-center justify-center`),\n        ...style,\n      }}\n    />\n  );\n};\n\nexport const Avatar = ({\n  style = {},\n  message,\n}: {\n  style?: any;\n  message: Message;\n}) => {\n  const {customer_id: customerId} = message;\n  const avatarUrl = getSenderProfilePhoto(message);\n  const color = getColorByUuid(customerId);\n  const display = getSenderIdentifier(message);\n\n  if (avatarUrl) {\n    return (\n      <Image\n        style={{\n          ...tailwind(\n            'mr-3 mb-1 w-8 h-8 rounded-full items-center justify-center'\n          ),\n          ...style,\n        }}\n        source={{\n          uri: avatarUrl,\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        ...tailwind(\n          `mr-3 mb-1 w-8 h-8 bg-${color}-500 rounded-full items-center justify-center`\n        ),\n        ...style,\n      }}\n    >\n      <Text style={tailwind('text-white text-base')}>\n        {display.slice(0, 1).toUpperCase()}\n      </Text>\n    </View>\n  );\n};\n\nconst MessageAttachment = ({attachment}: {attachment: Attachment}) => {\n  const {id, content_type: contentType, file_url: uri} = attachment;\n\n  if (contentType.startsWith('image')) {\n    // TODO: figure out best way to render image attachments\n    // TODO: investigate https://github.com/huiseoul/react-native-fit-image\n    return (\n      <Image\n        key={id}\n        style={{\n          ...tailwind('mt-2 bg-gray-100 rounded-lg'),\n          ...{width: '80%', height: undefined, aspectRatio: 1},\n        }}\n        resizeMode=\"contain\"\n        source={{uri}}\n      ></Image>\n    );\n  } else {\n    // TODO: how should we render non-image attachments?\n\n    return null;\n  }\n};\n\nexport const ChatMessage = ({\n  item,\n  currentUser,\n  avatar,\n  label,\n  style = {},\n}: {\n  item: Message;\n  currentUser: User | null;\n  avatar: React.ReactElement;\n  label?: React.ReactElement | null;\n  style?: any;\n}) => {\n  const {body, user_id: userId, attachments = []} = item;\n  const isMe = userId && currentUser?.id == userId;\n\n  if (isMe) {\n    return (\n      <View style={{...tailwind('mb-2 px-4 justify-end'), ...style}}>\n        <View\n          style={tailwind('py-2 px-3 bg-blue-500 ml-6 rounded-lg self-end')}\n        >\n          <Text style={tailwind('text-white text-base')}>{body}</Text>\n\n          {attachments.map((attachment) => (\n            <MessageAttachment key={attachment.id} attachment={attachment} />\n          ))}\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{...tailwind('mb-2 px-4 justify-start'), ...style}}>\n      <View style={tailwind('flex-row items-end')}>\n        {avatar}\n\n        <View style={tailwind('mr-6')}>\n          {label}\n\n          <View\n            style={tailwind('py-2 px-3 bg-gray-100 mr-6 rounded-lg self-start')}\n          >\n            <Text style={tailwind('text-base')}>{body}</Text>\n\n            {attachments.map((attachment) => (\n              <MessageAttachment key={attachment.id} attachment={attachment} />\n            ))}\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default ChatMessage;\n","import * as React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n} from 'react-native';\nimport tailwind from 'tailwind-rn';\n\nexport const ChatFooter = ({\n  onSendMessage,\n}: {\n  onSendMessage: (message: string) => void;\n}) => {\n  const [message, setNewMessage] = React.useState('');\n\n  const handleSendMessage = () => {\n    onSendMessage(message);\n    setNewMessage('');\n  };\n\n  return (\n    <View style={tailwind('px-4 pb-4 pt-3 flex-row items-end')}>\n      <TextInput\n        style={{\n          ...tailwind('p-3 rounded-xl border-gray-200 bg-gray-50 flex-1'),\n          borderWidth: StyleSheet.hairlineWidth,\n        }}\n        multiline\n        placeholder=\"Send a message...\"\n        value={message}\n        onChangeText={setNewMessage}\n      />\n\n      <TouchableOpacity\n        style={{\n          ...tailwind(\n            'border ml-3 py-3 px-5 border-gray-100 rounded-xl items-center'\n          ),\n        }}\n        activeOpacity={0.4}\n        onPress={handleSendMessage}\n      >\n        <Text style={tailwind(`text-${message ? 'blue' : 'gray'}-500`)}>\n          Send\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default ChatFooter;\n","import * as React from 'react';\nimport {StackScreenProps} from '@react-navigation/stack';\nimport {View, Text, SectionList, SafeAreaView} from 'react-native';\nimport tailwind from 'tailwind-rn';\n\nimport {RootStackParamList} from '../types';\nimport {useConversations} from '../components/conversations/ConversationsProvider';\nimport {\n  getGroupMembers,\n  getSenderIdentifier,\n  groupMessagesByDate,\n  hasSameSender,\n} from '../components/chat/support';\nimport ChatHeader from '../components/chat/ChatHeader';\nimport {ChatMessage, Avatar, EmptyAvatar} from '../components/chat/ChatMessage';\nimport ChatFooter from '../components/chat/ChatFooter';\nimport {sleep} from '../utils';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\n\ntype Props = StackScreenProps<RootStackParamList, 'Chat'> & {};\n\nexport default function ChatScreen({route, navigation}: Props) {\n  const {\n    currentUser,\n    reconnect,\n    fetchConversations,\n    getConversationById,\n    getMessagesByConversationId,\n    markConversationAsRead,\n    sendNewMessage,\n  } = useConversations();\n  const insets = useSafeAreaInsets();\n  const [isRefreshing, setRefreshing] = React.useState(false);\n  const {conversationId} = route.params;\n  const conversation = getConversationById(conversationId);\n  const messages = getMessagesByConversationId(conversationId);\n  const members = getGroupMembers(messages);\n  const grouped = groupMessagesByDate(messages);\n  const sections = Object.keys(grouped).map((date) => {\n    return {date, data: grouped[date]};\n  });\n\n  React.useEffect(() => {\n    const conversation = getConversationById(conversationId);\n    const latest = messages[messages.length - 1];\n\n    if (!conversation || !latest) {\n      return;\n    }\n\n    if (!conversation.read && !!latest.customer) {\n      return markConversationAsRead(conversationId);\n    }\n  }, [messages.length]);\n\n  const handleRefreshChat = async () => {\n    setRefreshing(true);\n\n    await fetchConversations({status: 'open'});\n    await reconnect();\n    await sleep(400);\n\n    setRefreshing(false);\n  };\n\n  const handleSendMessage = (message: string) => {\n    return sendNewMessage({body: message, conversation_id: conversationId});\n  };\n\n  const handlePressBack = () => {\n    navigation.navigate('Conversations');\n  };\n\n  const handlePressCustomer = () => {\n    const customerId = conversation && conversation.customer_id;\n\n    if (!customerId) {\n      return;\n    }\n\n    navigation.navigate('CustomerDetails', {customerId});\n  };\n\n  const renderItem = ({item, section, index}: any) => {\n    const {data = []} = section;\n    const next = data[index - 1];\n    const prev = data[index + 1];\n    const isPrevFromSameSender = !!prev && hasSameSender(item, prev);\n    const isNextFromSameSender = !!next && hasSameSender(item, next);\n    const isLastInGroup = !isNextFromSameSender;\n    const isGroupChat = members.length > 2;\n\n    return (\n      <ChatMessage\n        item={item}\n        style={tailwind(isLastInGroup ? 'mb-4' : 'mb-2')}\n        currentUser={currentUser}\n        avatar={isLastInGroup ? <Avatar message={item} /> : <EmptyAvatar />}\n        label={\n          !isPrevFromSameSender && isGroupChat ? (\n            <Text\n              style={tailwind(\n                `ml-1 mt-${index === 0 ? 0 : 3} mb-1 text-gray-400 text-xs`\n              )}\n            >\n              {getSenderIdentifier(item)}\n            </Text>\n          ) : null\n        }\n      />\n    );\n  };\n\n  return (\n    <>\n      {/* TODO: not sure the best way to have the top fill with the correct background... */}\n      {conversation && (\n        <SafeAreaView\n          style={{\n            ...tailwind('flex-none bg-gray-50'),\n            paddingTop: insets.top,\n          }}\n        >\n          <ChatHeader\n            conversation={conversation}\n            onPressBack={handlePressBack}\n            onPressCustomer={handlePressCustomer}\n          />\n        </SafeAreaView>\n      )}\n      <SafeAreaView\n        style={{...tailwind('flex-1 bg-white'), paddingBottom: insets.bottom}}\n      >\n        <View style={tailwind('flex-1')}>\n          <SectionList\n            refreshing={isRefreshing}\n            onRefresh={handleRefreshChat}\n            contentContainerStyle={tailwind('py-3')}\n            keyboardShouldPersistTaps=\"never\"\n            scrollEventThrottle={16}\n            inverted\n            onEndReached={() => console.log('onEndReached')}\n            onEndReachedThreshold={0.5}\n            onMomentumScrollBegin={() => {\n              console.log('onMomentumScrollBegin');\n            }}\n            sections={sections}\n            keyExtractor={(item, index) => {\n              return item.id;\n            }}\n            renderItem={renderItem}\n            renderSectionFooter={({section: {date}}) => (\n              <View style={tailwind('mt-3 mb-5 items-center')}>\n                <Text style={tailwind('text-gray-500')}>{date}</Text>\n              </View>\n            )}\n          />\n        </View>\n\n        <ChatFooter onSendMessage={handleSendMessage} />\n      </SafeAreaView>\n    </>\n  );\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport * as Linking from 'expo-linking';\nimport * as Notifications from 'expo-notifications';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Login: 'login',\n      Conversations: 'conversations',\n      Chat: 'messages/:conversationId',\n      NotFound: '*',\n    },\n  },\n  async getInitialURL() {\n    // Check if app was opened from a deep link\n    const initial = await Linking.getInitialURL();\n\n    if (initial) {\n      return initial;\n    }\n\n    // Handle URL from Expo push notifications\n    const response = await Notifications.getLastNotificationResponseAsync();\n    const url = response?.notification.request.content.data.url;\n\n    if (url && typeof url === 'string') {\n      return Linking.makeUrl('/') + url;\n    } else {\n      return null;\n    }\n  },\n  subscribe(listener: (url: string) => void) {\n    const onReceiveURL = ({url}: {url: string}) => {\n      return listener(url);\n    };\n\n    // Listen to incoming links from deep linking\n    Linking.addEventListener('url', onReceiveURL);\n\n    // Listen to Expo push notifications\n    const subscription = Notifications.addNotificationResponseReceivedListener(\n      (response: Notifications.NotificationResponse) => {\n        const url = response.notification.request.content.data.url;\n\n        if (url && typeof url === 'string') {\n          const formatted = Linking.makeUrl('/') + url;\n\n          listener(formatted);\n        }\n      }\n    );\n\n    return () => {\n      // Clean up the event listeners\n      Linking.removeEventListener('url', onReceiveURL);\n      subscription.remove();\n    };\n  },\n};\n","import React from 'react';\nimport {Image, Text, TouchableHighlight, View} from 'react-native';\nimport tailwind, {getColor} from 'tailwind-rn';\n\nimport {getColorByUuid} from '../../utils';\nimport {formatLastSentAt} from './support';\n\ntype Props = {\n  item: any;\n  onSelectConversation: (item: any) => void;\n};\n\nexport default function ConversationItem({item, onSelectConversation}: Props) {\n  const {read, customer = {}, messages = []} = item;\n  const {id: customerId, name, email, profile_photo_url: avatarUrl} = customer;\n  const display = name || email || 'Anonymous User';\n  // We order messages in reverse, so the latest is first\n  const [message] = messages;\n  const {body, created_at: timestamp} = message;\n  const text = body || '...';\n  const lastSentAt = formatLastSentAt(timestamp);\n  const formatted = text\n    .split('\\n')\n    .map((str: string) => str.trim())\n    .filter((str: string) => str.length > 0)\n    .join(' ');\n  const color = getColorByUuid(customerId);\n\n  return (\n    <TouchableHighlight\n      underlayColor={getColor('gray-300')}\n      onPress={() => onSelectConversation(item)}\n    >\n      <View\n        style={tailwind(\n          'flex-row p-3 border-b border-gray-100 items-center bg-white'\n        )}\n      >\n        {avatarUrl ? (\n          <Image\n            style={tailwind(\n              'mr-3 w-10 h-10 rounded-full items-center justify-center'\n            )}\n            source={{\n              uri: avatarUrl,\n            }}\n          />\n        ) : (\n          <View\n            style={tailwind(\n              `mr-3 w-10 h-10 bg-${color}-500 rounded-full items-center justify-center`\n            )}\n          >\n            <Text style={tailwind('text-white text-base')}>\n              {display.slice(0, 1).toUpperCase()}\n            </Text>\n          </View>\n        )}\n        <View style={tailwind('flex-1')}>\n          <Text style={tailwind(`mb-1 text-base ${read ? '' : 'font-bold'}`)}>\n            {display}\n          </Text>\n          <Text\n            numberOfLines={1}\n            ellipsizeMode=\"tail\"\n            style={tailwind(\n              `${read ? 'text-gray-500' : 'text-gray-700 font-bold'}`\n            )}\n          >\n            {formatted.length > 36\n              ? formatted.slice(0, 32).concat('...')\n              : formatted}\n            {' · '}\n            {lastSentAt}\n          </Text>\n        </View>\n      </View>\n    </TouchableHighlight>\n  );\n}\n","import * as React from 'react';\nimport {StackScreenProps} from '@react-navigation/stack';\nimport {\n  ActivityIndicator,\n  Dimensions,\n  SafeAreaView,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport {SwipeListView} from 'react-native-swipe-list-view';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\nimport {Icon} from 'react-native-elements/dist/icons/Icon';\nimport tailwind from 'tailwind-rn';\n\nimport {RootStackParamList} from '../types';\nimport ConversationItem from '../components/conversations/ConversationItem';\nimport {useConversations} from '../components/conversations/ConversationsProvider';\nimport {sleep} from '../utils';\nimport logger from '../logger';\n\ntype Props = StackScreenProps<RootStackParamList, 'Root'> & {};\n\nexport default function ConversationsScreen({navigation}: Props) {\n  const [isRefreshing, setRefreshing] = React.useState(false);\n  const {\n    pagination,\n    conversations = [],\n    reconnect,\n    fetchConversations,\n    updateConversationById,\n  } = useConversations();\n  const insets = useSafeAreaInsets();\n\n  const handleSelectConversation = (item: any) => {\n    const {id: conversationId, messages = []} = item;\n\n    navigation.navigate('Chat', {conversationId, messages});\n  };\n\n  const handleRefreshConversations = async () => {\n    setRefreshing(true);\n\n    await fetchConversations({status: 'open'});\n    await reconnect();\n    await sleep(400);\n\n    setRefreshing(false);\n  };\n\n  const closeConversation = async (id: string) => {\n    try {\n      await updateConversationById(id, {\n        conversation: {status: 'closed'},\n      });\n    } catch (error) {\n      logger.error('Failed to close conversation', error);\n    }\n  };\n\n  const handleLoadMoreConversations = async () => {\n    console.log('Loading more conversations:', pagination);\n\n    if (pagination.next) {\n      await fetchConversations({status: 'open', after: pagination.next});\n    }\n  };\n\n  const renderItem = ({item}: any) => {\n    return (\n      <ConversationItem\n        item={item}\n        onSelectConversation={handleSelectConversation}\n      />\n    );\n  };\n\n  const renderHiddenItem = ({item}: any) => {\n    return (\n      <TouchableOpacity\n        activeOpacity={0.5}\n        onPress={() => closeConversation(item.id)}\n        style={tailwind('h-full bg-green-400')}\n      >\n        <View\n          style={[\n            tailwind(\n              'h-full bg-green-400 self-end justify-center items-center px-5'\n            ),\n            {width: 80},\n          ]}\n        >\n          <Icon name=\"check\" type=\"feather\" color=\"white\" />\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  // TODO: smooth this out? See:\n  // https://github.com/jemise111/react-native-swipe-list-view/blob/master/SwipeListExample/examples/swipe_to_delete.js\n  const handleSwipeValueChange = async (data: {\n    key: string;\n    value: number;\n    direction: 'left' | 'right';\n    isOpen: boolean;\n  }) => {\n    const {key: conversationId, value} = data;\n    const swipeThreshold = -Dimensions.get('window').width;\n    const isElementSwipedOffScreen = value < swipeThreshold;\n\n    if (isElementSwipedOffScreen) {\n      await closeConversation(conversationId);\n    }\n  };\n\n  const displayed = conversations.filter((c) => c.status === 'open');\n\n  return (\n    <SafeAreaView\n      style={{\n        ...tailwind('h-full bg-white'),\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n      }}\n    >\n      <View style={tailwind('p-4 items-center')}>\n        <Text style={tailwind('font-bold text-lg')}>Conversations</Text>\n      </View>\n\n      <SwipeListView\n        data={displayed}\n        disableRightSwipe={true}\n        keyboardShouldPersistTaps=\"handled\"\n        keyExtractor={(item, index) => {\n          return item.id;\n        }}\n        onEndReached={handleLoadMoreConversations}\n        onEndReachedThreshold={0.01}\n        onMomentumScrollBegin={(...args) => {\n          console.log('onMomentumScrollBegin');\n        }}\n        onRefresh={handleRefreshConversations}\n        rightOpenValue={-96}\n        refreshing={isRefreshing}\n        renderHiddenItem={renderHiddenItem}\n        renderItem={renderItem}\n        useFlatList={true}\n        ListFooterComponent={\n          displayed.length > 50 ? (\n            <View style={tailwind('p-4 items-center')}>\n              {pagination.next ? (\n                <ActivityIndicator />\n              ) : (\n                <Text style={tailwind('my-6 text-gray-500')}>\n                  All conversations loaded 🚀\n                </Text>\n              )}\n            </View>\n          ) : null\n        }\n      />\n    </SafeAreaView>\n  );\n}\n","import * as React from 'react';\nimport {StackScreenProps} from '@react-navigation/stack';\nimport {\n  Image,\n  View,\n  Text,\n  ScrollView,\n  SafeAreaView,\n  ActivityIndicator,\n  TouchableOpacity,\n} from 'react-native';\nimport {Icon} from 'react-native-elements/dist/icons/Icon';\nimport tailwind, {getColor} from 'tailwind-rn';\nimport dayjs from 'dayjs';\n\nimport {RootStackParamList} from '../types';\nimport useCustomer from '../hooks/useCustomer';\nimport {formatServerError, getColorByUuid} from '../utils';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\n\ntype CustomerDetailsScreenProps = StackScreenProps<\n  RootStackParamList,\n  'CustomerDetails'\n>;\n\nconst formatUtcDateTime = (datetime: string) =>\n  dayjs.utc(datetime).local().format('MMMM D, hh:mm a');\n\nconst formatDate = (date: string) => dayjs(date).format('MMMM D, YYYY');\n\nexport default function CustomerDetailsScreen({\n  route,\n  navigation,\n}: CustomerDetailsScreenProps) {\n  const {customerId} = route.params;\n  const insets = useSafeAreaInsets();\n  const {customer, isFetching, error} = useCustomer(customerId, {\n    expand: ['company'],\n  });\n\n  if (isFetching) {\n    // TODO: make it possible to \"go back\" if this is taking too long\n    return (\n      <View style={tailwind('flex-1 bg-white justify-center items-center')}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n  }\n\n  if (error || !customer) {\n    const errorMessage = formatServerError(\n      error || new Error('Unable to retrieve customer data!')\n    );\n\n    // TODO: make it possible to \"go back\"\n    return (\n      <View style={tailwind('flex-1 bg-white justify-center items-center')}>\n        <Text style={tailwind('text-base text-red-500')}>{errorMessage}</Text>\n      </View>\n    );\n  }\n\n  const {\n    browser,\n    company,\n    email,\n    name,\n    os,\n    pathname,\n    phone,\n    external_id: externalId,\n    first_seen: firstSeenAt,\n    last_seen_at: lastSeenAt,\n    ip: lastIpAddress,\n    profile_photo_url: avatarUrl,\n    time_zone: timezone,\n    metadata = {},\n  } = customer;\n  const hasMetadata = !!metadata && Object.keys(metadata).length > 0;\n  const formattedTimezone =\n    timezone && timezone.length ? timezone.split('_').join(' ') : null;\n  const title = name || email || 'Anonymous User';\n  const color = getColorByUuid(customerId);\n\n  return (\n    <>\n      <SafeAreaView\n        style={{\n          ...tailwind('flex-none bg-gray-50'),\n          paddingTop: insets.top,\n        }}\n      >\n        <View style={tailwind('pt-6 px-4 flex-row items-start')}>\n          <TouchableOpacity onPress={navigation.goBack}>\n            <Icon\n              name=\"chevron-left\"\n              type=\"feather\"\n              color={getColor('blue-500')}\n              onPress={navigation.goBack}\n            />\n          </TouchableOpacity>\n        </View>\n\n        <View style={tailwind('items-center bg-gray-50 pb-4')}>\n          {avatarUrl ? (\n            <Image\n              style={{\n                ...tailwind('w-14 h-14 rounded-full mb-2'),\n              }}\n              source={{\n                uri: avatarUrl,\n              }}\n            />\n          ) : (\n            <View\n              style={{\n                ...tailwind(\n                  `mb-2 w-14 h-14 bg-${color}-500 rounded-full items-center justify-center`\n                ),\n              }}\n            >\n              <Text style={tailwind('text-white text-xl')}>\n                {title.slice(0, 1).toUpperCase()}\n              </Text>\n            </View>\n          )}\n          <Text style={tailwind('font-bold text-xl')}>{title}</Text>\n        </View>\n      </SafeAreaView>\n\n      <SafeAreaView style={{...tailwind('flex-1 bg-white')}}>\n        <ScrollView style={tailwind('p-4')}>\n          <CustomerDetailsSection\n            title=\"Basic\"\n            properties={[\n              {name: 'Email', value: email},\n              {name: 'Phone', value: phone},\n              {name: 'ID', value: externalId},\n            ]}\n          />\n\n          <CustomerDetailsSection\n            title=\"Activity\"\n            properties={[\n              {\n                name: 'First Seen',\n                value: firstSeenAt ? formatDate(firstSeenAt) : null,\n              },\n              {\n                name: 'Last Seen',\n                value: lastSeenAt ? formatUtcDateTime(lastSeenAt) : null,\n              },\n              {\n                name: 'Last Seen URL',\n                value: pathname,\n              },\n            ]}\n          />\n\n          <CustomerDetailsSection\n            title=\"Device\"\n            properties={[\n              {name: 'Timezone', value: formattedTimezone},\n              {\n                name: 'Browser',\n                value: [os, browser].filter(Boolean).join(' · ') || 'Unknown',\n              },\n              {name: 'IP', value: lastIpAddress},\n            ]}\n          />\n\n          {company && (\n            <CustomerDetailsSection\n              title=\"Company\"\n              properties={[\n                {name: 'Name', value: company.name},\n                {name: 'Slack Channel', value: company.slack_channel_name},\n              ]}\n            />\n          )}\n\n          {hasMetadata && (\n            <CustomerDetailsSection\n              title=\"Metadata\"\n              properties={Object.entries(metadata).map(([key, value]) => ({\n                name: key,\n                value: String(value),\n              }))}\n            />\n          )}\n\n          <View style={tailwind('p-6')} />\n        </ScrollView>\n      </SafeAreaView>\n    </>\n  );\n}\n\ntype CustomerDetailsSectionProps = {\n  title: string;\n  properties: Array<{\n    name: string;\n    value?: number | string | null;\n  }>;\n  style?: any;\n};\n\nconst CustomerDetailsSection = ({\n  title,\n  properties,\n  style = {},\n}: CustomerDetailsSectionProps) => {\n  return (\n    <View\n      style={{...tailwind('pt-4 pb-2 mb-2 border-b border-gray-100'), ...style}}\n    >\n      <Text style={tailwind('font-bold text-lg mb-4')}>{title}</Text>\n\n      {properties.map(({name, value}) => (\n        <View key={name} style={tailwind('mb-4')}>\n          <Text\n            style={tailwind('text-gray-400 text-xs uppercase tracking-wide')}\n          >\n            {name}\n          </Text>\n          <Text style={tailwind('text-base text-gray-800')}>\n            {value ?? 'Unknown'}\n          </Text>\n        </View>\n      ))}\n    </View>\n  );\n};\n","import * as React from 'react';\n\nimport * as API from '../api';\nimport {Customer} from '../types';\n\nexport default function useCustomer(\n  customerId: string,\n  options: {expand: Array<string>} = {expand: []}\n) {\n  const [customer, setCustomer] = React.useState<Customer>();\n  const [error, setError] = React.useState<Error>();\n  const [isFetching, setIsFetching] = React.useState(true);\n\n  React.useEffect(() => {\n    setIsFetching(true);\n\n    API.fetchCustomer(customerId, options)\n      .then((customer) => setCustomer(customer))\n      .catch((error) => setError(error))\n      .finally(() => setIsFetching(false));\n  }, [customerId]);\n\n  return {customer, isFetching, error};\n}\n","import React, {useContext} from 'react';\n\nimport Storage, {AUTH_CACHE_KEY} from '../storage';\nimport * as API from '../api';\nimport logger from '../logger';\n\nexport const AuthContext = React.createContext<{\n  isAuthenticated: boolean;\n  tokens: any | null;\n  loading: boolean;\n  register: (params: any) => Promise<void>;\n  login: (params: any) => Promise<void>;\n  logout: () => Promise<void>;\n  refresh: (token: string) => Promise<void>;\n}>({\n  isAuthenticated: false,\n  tokens: null,\n  loading: false,\n  register: () => Promise.resolve(),\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  refresh: () => Promise.resolve(),\n});\n\nexport const useAuth = () => useContext(AuthContext);\n\n// Refresh every 20 mins\nconst AUTH_SESSION_TTL = 20 * 60 * 1000;\n\ntype Props = React.PropsWithChildren<{}>;\ntype State = {\n  loading: boolean;\n  tokens: any;\n  isAuthenticated: boolean;\n};\n\nexport class AuthProvider extends React.Component<Props, State> {\n  timeout: any = null;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      isAuthenticated: false,\n      tokens: null,\n    };\n  }\n\n  async componentDidMount() {\n    const tokens = await Storage.get(AUTH_CACHE_KEY);\n    const refreshToken = tokens && tokens.renew_token;\n\n    if (!refreshToken) {\n      this.setState({loading: false});\n\n      return;\n    }\n\n    // Attempt refresh auth session on load\n    await this.refresh(refreshToken);\n\n    this.setState({tokens, loading: false});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n\n    this.timeout = null;\n  }\n\n  handleAuthSuccess = async (tokens: any) => {\n    Storage.set(AUTH_CACHE_KEY, tokens);\n    this.setState({tokens, isAuthenticated: true});\n    const nextRefreshToken = tokens && tokens.renew_token;\n\n    // Refresh the session every 20 mins to avoid the access token expiring\n    // (By default, the session will expire after 30 mins)\n    this.timeout = setTimeout(\n      () => this.refresh(nextRefreshToken),\n      AUTH_SESSION_TTL\n    );\n\n    return tokens;\n  };\n\n  handleClearAuth = () => {\n    Storage.remove(AUTH_CACHE_KEY);\n\n    this.setState({tokens: null, isAuthenticated: false});\n  };\n\n  refresh = async (refreshToken: string) => {\n    return API.renew(refreshToken)\n      .then((tokens) => this.handleAuthSuccess(tokens))\n      .catch((err) => {\n        logger.error('Invalid session:', err);\n      });\n  };\n\n  register = async (params: API.RegisterParams): Promise<void> => {\n    console.debug('Signing up!');\n    // Set user, authenticated status, etc\n    return API.register(params)\n      .then((tokens) => this.handleAuthSuccess(tokens))\n      .then(() => {\n        console.debug('Successfully signed up!');\n      });\n  };\n\n  login = async (params: API.LoginParams): Promise<void> => {\n    console.debug('Logging in!');\n    // Set user, authenticated status, etc\n    return API.login(params)\n      .then((tokens) => this.handleAuthSuccess(tokens))\n      .then(() => {\n        console.debug('Successfully logged in!');\n      });\n  };\n\n  logout = async (): Promise<void> => {\n    console.debug('Logging out!');\n    // Set user, authenticated status, etc\n    return API.logout()\n      .then(() => this.handleClearAuth())\n      .then(() => {\n        console.debug('Successfully logged out!');\n      });\n  };\n\n  render() {\n    const {loading, isAuthenticated, tokens} = this.state;\n\n    return (\n      <AuthContext.Provider\n        value={{\n          isAuthenticated,\n          tokens,\n          loading,\n          register: this.register,\n          login: this.login,\n          logout: this.logout,\n          refresh: this.refresh,\n        }}\n      >\n        {this.props.children}\n      </AuthContext.Provider>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  Image,\n  ActivityIndicator,\n} from 'react-native';\nimport tailwind from 'tailwind-rn';\nimport {useAuth} from '../components/AuthProvider';\nimport {formatServerError, sleep} from '../utils';\n\nexport default function LoginScreen() {\n  const {login} = useAuth();\n  const [pending, setPending] = React.useState(false);\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [error, setErrorMessage] = React.useState<string | null>(null);\n\n  const handleLogIn = async () => {\n    setPending(true);\n\n    try {\n      await login({email, password});\n\n      console.log('Logged in!');\n    } catch (err) {\n      const formatted = formatServerError(err);\n      console.error('Failed to login!', err);\n      setErrorMessage(formatted);\n      setPending(false);\n    }\n  };\n\n  return (\n    <SafeAreaView style={tailwind('h-full bg-white')}>\n      <View style={tailwind('mt-24 items-center')}>\n        <Image\n          source={require('../assets/images/logo.png')}\n          style={tailwind('w-24 h-24')}\n          resizeMode={'contain'}\n        />\n      </View>\n      <View style={tailwind('mt-8 items-center')}>\n        <Text style={tailwind('text-3xl font-extralight mb-6')}>Papercups</Text>\n        <TextInput\n          style={{\n            ...tailwind('w-72 h-12 px-4 rounded-lg border-gray-400 mb-4'),\n            borderWidth: StyleSheet.hairlineWidth,\n          }}\n          placeholder=\"Email\"\n          onChangeText={setEmail}\n          autoCapitalize={'none'}\n          autoCompleteType=\"off\"\n          value={email}\n        />\n        <TextInput\n          style={{\n            ...tailwind('w-72 h-12 px-4 rounded-lg border-gray-400 mb-4'),\n            borderWidth: StyleSheet.hairlineWidth,\n          }}\n          placeholder=\"Password\"\n          onChangeText={setPassword}\n          autoCapitalize={'none'}\n          autoCompleteType=\"off\"\n          secureTextEntry={true}\n          value={password}\n        />\n\n        <TouchableOpacity\n          style={tailwind(\n            `w-72 p-2 rounded-lg bg-blue-400 mt-5 items-center ${\n              pending ? 'bg-opacity-40' : ''\n            }`\n          )}\n          activeOpacity={0.4}\n          disabled={pending}\n          onPress={handleLogIn}\n        >\n          {pending ? (\n            <View style={tailwind('flex-row items-center justify-center')}>\n              <ActivityIndicator color=\"white\" />\n              <Text style={tailwind('ml-2 text-white text-lg')}>\n                Logging in...\n              </Text>\n            </View>\n          ) : (\n            <Text style={tailwind('text-white text-lg')}>Log in</Text>\n          )}\n        </TouchableOpacity>\n\n        {error && (\n          <View style={tailwind('mt-8')}>\n            <Text style={tailwind('text-red-500')}>{error}</Text>\n          </View>\n        )}\n      </View>\n    </SafeAreaView>\n  );\n}\n","import React, {useContext} from 'react';\nimport {Socket} from 'phoenix';\nimport throttle from 'lodash/throttle';\n\nimport * as API from '../api';\nimport {noop} from '../utils';\nimport logger from '../logger';\nimport {isDev} from '../config';\n\n// TOOD: figure out why ngrok doesn't seem to work here?\n// const SOCKET_URL = 'ws://localhost:4000/socket';\nexport const SOCKET_URL = isDev\n  ? 'wss://alex-papercups-staging.herokuapp.com/socket'\n  : 'wss://app.papercups.io/socket';\n\nexport const SocketContext = React.createContext<{\n  socket: Socket;\n  hasConnectionError?: boolean;\n}>({\n  socket: new Socket(SOCKET_URL),\n  hasConnectionError: false,\n});\n\nexport const useSocket = () => useContext(SocketContext);\n\ntype Props = {\n  url?: string;\n  params?: Record<string, string>;\n  options?: any;\n  refresh: (token: string) => Promise<void>;\n} & React.PropsWithChildren<{}>;\n\ntype State = {\n  socket: Socket;\n  history: Array<Socket>;\n};\n\nexport class SocketProvider extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {url = SOCKET_URL, params = {}} = this.props;\n    const socket = new Socket(url, {params});\n\n    this.state = {\n      socket,\n      history: [],\n    };\n  }\n\n  async componentDidMount() {\n    const {url = SOCKET_URL} = this.props;\n    const token = await API.getAccessToken();\n    const socket = new Socket(url, {\n      params: {token},\n    });\n\n    this.setState({socket, history: [socket]}, () => this.connect());\n  }\n\n  componentWillUnmount() {\n    this.disconnect();\n  }\n\n  createNewSocket = async () => {\n    const {url = SOCKET_URL} = this.props;\n    const token = await API.getAccessToken();\n\n    return new Socket(url, {params: {token}});\n  };\n\n  connect = () => {\n    const {socket} = this.state;\n\n    socket.connect();\n\n    socket.onOpen(() => {\n      console.debug(`Successfully connected to socket!`);\n    });\n\n    socket.onClose(() => {\n      console.debug(`Socket successfully closed!`);\n    });\n\n    socket.onError(\n      throttle(() => {\n        logger.error(\n          `Error connecting to socket. Try refreshing the app.`,\n          socket\n        );\n\n        this.reconnect();\n      }, 30000)\n    );\n  };\n\n  reconnect = () => {\n    this.disconnect(async () => {\n      const token = await API.getRefreshToken();\n\n      if (!token) {\n        // Attempt connect again\n        return this.connect();\n      }\n\n      await this.props.refresh(token);\n\n      const socket = await this.createNewSocket();\n\n      this.setState({socket, history: [socket, ...this.state.history]}, () =>\n        this.connect()\n      );\n    });\n  };\n\n  disconnect = (cb = noop) => {\n    const {socket} = this.state;\n\n    socket.disconnect(cb);\n  };\n\n  render() {\n    return (\n      <SocketContext.Provider value={{socket: this.state.socket}}>\n        {this.props.children}\n      </SocketContext.Provider>\n    );\n  }\n}\n\nexport default SocketProvider;\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport * as React from 'react';\nimport {ColorSchemeName, KeyboardAvoidingView, Platform} from 'react-native';\nimport tailwind from 'tailwind-rn';\n\nimport {RootStackParamList} from '../types';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport ChatScreen from '../screens/ChatScreen';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport ConversationsScreen from '../screens/ConversationsScreen';\nimport CustomerDetailsScreen from '../screens/CustomerDetailsScreen';\nimport LoginScreen from '../screens/LoginScreen';\nimport {useAuth} from '../components/AuthProvider';\nimport SocketProvider, {SocketContext} from '../components/SocketProvider';\nimport {ConversationsProvider} from '../components/conversations/ConversationsProvider';\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={tailwind('h-full')}\n    >\n      <NavigationContainer\n        linking={LinkingConfiguration}\n        theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}\n      >\n        <RootNavigator />\n      </NavigationContainer>\n    </KeyboardAvoidingView>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const auth = useAuth();\n\n  if (auth.loading) {\n    // TODO: fix splash screen\n    return null;\n  }\n\n  if (!auth.isAuthenticated) {\n    return (\n      <Stack.Navigator screenOptions={{headerShown: false}}>\n        <Stack.Screen name=\"Login\" component={LoginScreen} />\n\n        <Stack.Screen\n          name=\"NotFound\"\n          component={NotFoundScreen}\n          options={{title: 'Oops!'}}\n        />\n      </Stack.Navigator>\n    );\n  }\n\n  return (\n    <SocketProvider refresh={auth.refresh}>\n      <SocketContext.Consumer>\n        {({socket}) => {\n          return (\n            <ConversationsProvider socket={socket}>\n              <Stack.Navigator screenOptions={{headerShown: false}}>\n                <Stack.Screen\n                  name=\"Conversations\"\n                  component={ConversationsScreen}\n                />\n                <Stack.Screen name=\"Chat\" component={ChatScreen} />\n                <Stack.Screen\n                  name=\"CustomerDetails\"\n                  component={CustomerDetailsScreen}\n                />\n\n                <Stack.Screen\n                  name=\"NotFound\"\n                  component={NotFoundScreen}\n                  options={{title: 'Oops!'}}\n                />\n              </Stack.Navigator>\n            </ConversationsProvider>\n          );\n        }}\n      </SocketContext.Consumer>\n    </SocketProvider>\n  );\n}\n","import 'react-native-gesture-handler';\nimport {StatusBar} from 'expo-status-bar';\nimport React from 'react';\nimport {SafeAreaProvider} from 'react-native-safe-area-context';\nimport * as Notifications from 'expo-notifications';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport {AuthProvider} from './components/AuthProvider';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <AuthProvider>\n          <Navigation colorScheme={colorScheme} />\n        </AuthProvider>\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import {Ionicons} from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","import {ColorSchemeName, useColorScheme as _useColorScheme} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"static/media/logo.76c1fe2a.png\";"],"sourceRoot":""}